//alert(gon.places);
// gon.places[i]['lat']
// gon.places[i]['lng']
// gon.places[i]['name']

      //End of for loop
//gon.places is the current var for all places

function initialize() {
  var mapOptions = {
    zoom: 11,
    center: new google.maps.LatLng(41.2918589, -96.0812485),
    //Map Controls
    mapTypeControl:true,
    //
    panControl: true,
          panControlOptions: {
          position: google.maps.ControlPosition.TOP_RIGHT
          },

    zoomControl: true,
          zoomControlOptions: {
          style: google.maps.ZoomControlStyle.LARGE,
          position: google.maps.ControlPosition.LEFT_TOP
          },

    streetViewControl: true,
          streetViewControlOptions: {
          position: google.maps.ControlPosition.LEFT_TOP
          },
          // MAP CONTROLS (END)
        };
  
  var myMap = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
  //var marker =[];
  //var infowindow=[];

  var p=0
  var i=0
  var contentstring=""
  var check_peeps = gon.group_people.length
  while (i<gon.places.length) {      
    
    p=0;
    for(x=0; x<check_peeps; x++){
     if (gon.group_people[p][1] == gon.places[i]["id"] ) {
      var contentstring = contentstring + ' <IMG BORDER="0" ALIGN="Left" SRC='+ gon.group_people[p][0] + '> '
      
      } 
      p++
    }
      var marker = new google.maps.Marker({
         position: new google.maps.LatLng(gon.places[i]["lat"], gon.places[i]["lng"]), 
           map: myMap,
         title: gon.places[i]["name"] 
         });
         //info window for each place
         (function(marker, i){
           google.maps.event.addListener(marker, 'click', function() {
             infowindow = new google.maps.InfoWindow({
               content: (gon.places[i]["name"]).link("/places/"+(i+1)) + contentstring
             });
             infowindow.open(myMap,marker);
         
           });
         })(marker,i);
         i++
       
       }
}
       
      // });  
      // i++
    // }
  //} 
  // ERB for markers, having to load instance on view, find helper or another method to pass in inst      //var from controller. JSON google api parse in controller method as well to extract information from
//   hash. Worked in view where @places is defined,  bad juju.



  function loadScript() {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = 'https://maps.googleapis.com/maps/api/js?key=<%=ENV["GOOGLE_API_KEY"]%>&sensor=false&' +
            'callback=initialize';
        document.body.appendChild(script);
      }  
//This is for a place search to get latlong and business name, implement once markers work on       //javascript. Took from google place api. Will need to conform to place syntax to get all information
//desired in the hash. The above does not produce a user name. Worst case it is user dependent until
//AJAX and JSON is configured correctly with returning information to the database. The api query to
//places in JSON can be parsed in a method and implemented along side this more general information
//gathering method. 
  
  // var infowindow = new google.maps.InfoWindow();
  // var service = new google.maps.places.PlacesService(map);
  // 
  // service.getDetails(request, function(place, status) {
  //   if (status == google.maps.places.PlacesServiceStatus.OK) {
  //     var marker = new google.maps.Marker({
  //       map: map,
  //       position: place.geometry.location
  //     });
  //     google.maps.event.addListener(marker, 'click', function() {
  //       infowindow.setContent(place.name);
  //       infowindow.open(map, this);
  //     });
  //   }
  // });


//google.maps.event.addDomListener(window, 'load', initialize);

window.onload = loadScript;